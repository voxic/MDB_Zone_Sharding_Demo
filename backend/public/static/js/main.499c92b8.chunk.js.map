{"version":3,"sources":["components/ShardInfo.js","App.js","index.js"],"names":["shardInfo","shardData","Card","className","Body","Title","Image","src","style","maxWidth","roundedCircle","name","Text","fontSize","TransitionGroup","component","CSSTransition","classNames","timeout","enter","exit","objects","App","useState","configOpen","setConfigOpen","project","hostname","username","password","exDocument1","generateRandomDomDocument","database","data","setData","clusterInfo","setClusterInfo","shardInformation","setShardInformation","shardInfoLoaded","setShardInfoLoaded","isConnected","setIsConnected","connectButtonStatus","setConnectButtonStatus","color","connectButtonText","setConnectButtonStatusText","socketResponse","setSocketResponse","socket","setSocket","clusterHostnameRef","useRef","usernameRef","databaseRef","passwordRef","exDocument1Ref","handleInput","tempData","current","value","JSON","parse","cha","randomCountry","Math","random","floor","String","useEffect","newSocket","socketIOClient","on","msg","disconnect","raw","Object","keys","map","shard","push","split","console","log","status","payload","stringify","Container","fluid","marginTop","Row","marginBottom","Col","lg","Collapse","in","Form","Group","controlId","Label","Control","ref","type","placeholder","onBlur","onInput","Button","disabled","onClick","emit","variant","size","as","rows","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.499c92b8.chunk.js","sourcesContent":["import React from 'react'\nimport { Row, Col, Card, Image } from 'react-bootstrap';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nexport default function shardInfo({ shardData }) {\n  return (\n        <Card className=\"shadow-sm\">\n        <Card.Body>\n            <Card.Title className=\"text-center\"><Image src='Icons/Technical_MDB_Sharding3x.png' style={{maxWidth : \"50px\"}} roundedCircle/><h4>{shardData.name}</h4></Card.Title>\n            <Card.Text style={{fontSize : \"1.5em\"}} className=\"text-center\">\n                Documents:\n                <span>             \n            <TransitionGroup component=\"span\" className=\"count\">\n              <CSSTransition\n                classNames=\"count\"\n                key={shardData.objects}\n                timeout={{ enter: 500, exit: 500 }}\n              >\n                <span> {shardData.objects}</span>\n              </CSSTransition>\n            </TransitionGroup>\n            </span>\n            </Card.Text>                \n        </Card.Body>\n    </Card>\n  )\n}\n","import React from 'react';\nimport { useRef, useEffect, useState } from 'react'\nimport { Container,Collapse, Row, Col, Card, Button, Form, Table, Image, InputGroup, FormControl, ButtonGroup, Modal } from 'react-bootstrap';\nimport { Calculator, Cash, House } from 'react-bootstrap-icons';\nimport socketIOClient from 'socket.io-client';\nimport ShardInfo from './components/ShardInfo';\n\n\nfunction App() {\n\n  const [configOpen, setConfigOpen] = useState(true);\n\n  const [data, setData] = useState({\n    project : \"\",\n    hostname : \"xxxx.mongodb.net\",\n    username : \"\",\n    password : \"\",\n    exDocument1 : generateRandomDomDocument(),\n    database : \"\"\n  });\n\n  const [clusterInfo, setClusterInfo] = useState({});\n  const [shardInformation, setShardInformation] = useState(\"\");\n  const [shardInfoLoaded, setShardInfoLoaded] = useState(false)\n  const [isConnected, setIsConnected] = useState(false);\n\n  const [connectButtonStatus, setConnectButtonStatus] = useState(false)\n  const [connectButtonText, setConnectButtonStatusText] = useState(()=> {\n    return(<span style={{color : \"red\"}}>All fields are required!</span>)\n  })\n\n  const [socketResponse, setSocketResponse] = useState(\"\");\n  const [socket, setSocket] = useState(\"\");\n\n  const clusterHostnameRef = useRef();\n  const usernameRef = useRef();\n  const databaseRef = useRef();\n  const passwordRef = useRef();\n  const exDocument1Ref = useRef();\n\n  const loadFieldRef = useRef();\n\n  function handleInput(){\n\n    const tempData = {...data}\n\n    // Set all input field refs\n    tempData.password = passwordRef.current.value;\n    tempData.username = usernameRef.current.value;\n    tempData.hostname = clusterHostnameRef.current.value;\n    tempData.database = databaseRef.current.value;\n    tempData.exDocument1 = JSON.parse(exDocument1Ref.current.value);\n    setData(tempData);\n\n  }\n\n  function handleConnectButton(){\n    socket.emit(\"message\", {\"command\" : \"connect\", \"payload\" : data})\n    setConnectButtonStatusText(()=> {\n      return(<span style={{color : \"black\"}}>Connecting...</span>)\n    })    \n    setConnectButtonStatus(true)\n  }\n\n  function generateRandomDomDocument(){\n\n    const cha = [\"f\",\"e\",\"a\",\"x\",\"t\",\"y\",\"w\",\"b\"]\n\n    var randomCountry = \"\"\n    if(Math.random() <= 0.6){\n      randomCountry = \"SE\"\n    }else {\n      randomCountry = \"US\"\n    }\n    const randomTrack = \"Z1\"+cha[Math.floor(Math.random() * (8 - 0) + 0)]+\"ieo\"+cha[Math.floor(Math.random() * (8 - 0) + 0)]+\"pg\"+cha[Math.floor(Math.random() * (8 - 0) + 0)]+String(Math.floor(Math.random() * (9999999 - 1111111) + 1111111)+\"sdds\"+cha[Math.floor(Math.random() * (8 - 0) + 0)]+\"sd\")\n    return(\n    {\n      \"tracking_num\": randomTrack,\n      \"location\": randomCountry\n    })\n\n  }\n\n  useEffect(()=>{\n\n    const newSocket = socketIOClient(\"http://localhost:8080\")\n    setSocket(newSocket)\n\n    newSocket.on(\"status\", (msg) =>{\n      setSocketResponse(msg)\n    })\n\n    return () => newSocket.disconnect()\n\n  }, [setSocket])\n\n\n  useEffect(()=>{\n    if(isConnected){\n      if(clusterInfo.raw){\n        var tempData = []\n        Object.keys(clusterInfo.raw).map((shard) => {\n            tempData.push({\n              name: shard.split(\"/\")[0],\n              objects: clusterInfo.raw[shard].objects\n            })\n        })\n        console.log(tempData)\n        setShardInformation(tempData)\n        setShardInfoLoaded(true)\n      }\n    }\n  }, [clusterInfo])\n\n  useEffect(()=>{\n    console.log(socketResponse)\n    if(socketResponse.status == \"Connected\"){\n      setConnectButtonStatusText(()=> {\n        return(<span style={{color : \"green\"}}>Connected</span>)\n      }) \n    }else if(socketResponse.status == \"Error\"){\n      setConnectButtonStatus(false)\n      setConnectButtonStatusText(()=> {\n        return(<span style={{color : \"red\"}}>Unable to connect</span>)\n      }) \n    }else if(socketResponse.payload){\n      console.log(socketResponse.payload)\n      setClusterInfo(socketResponse.payload) \n      setIsConnected(true)\n    } else {\n      console.log(socketResponse)\n    }\n\n  }, [socketResponse])\n\n  useEffect(()=>{\n\n    passwordRef.current.value = data.password;\n    usernameRef.current.value = data.username;\n    clusterHostnameRef.current.value = data.hostname;\n    exDocument1Ref.current.value = JSON.stringify(data.exDocument1, null, '\\t');\n\n    if(data.hostname != ' ' && data.username != '' && data.password != ''){\n      if(!isConnected){\n        setConnectButtonStatus(false)\n        setConnectButtonStatusText(\"\")\n      }\n\n    } else {\n      setConnectButtonStatusText(()=> {\n        setConnectButtonStatus(true)\n        return(<span style={{color : \"red\"}}>All fields are required!</span>)\n      })\n    }\n\n  }, [data])\n\n  function handleInsertButton(){\n\n    socket.emit(\"message\", {\n      \"command\" : \"insert\",\n      \"payload\" : data.exDocument1\n    })\n    var tempData = {...data}\n    tempData.exDocument1 = generateRandomDomDocument()\n    setData(tempData)\n\n  }\n\n\n\n  return (\n      <Container fluid=\"lg\" className=\"px-4\" style={{ marginTop: \"50px\" }}>\n      <Row style={{marginBottom: \"10px\"}}>\n        <Col lg={12} className=\"text-center\">\n          <h1><Image src='Icons/Technical_MDB_Sharding3x.png' style={{maxWidth : \"150px\"}} roundedCircle/> MongoDB Sharding Demo</h1>\n        </Col>\n      </Row>\n      \n      <Row style={{marginBottom: \"10px\"}}>\n        <Col lg=\"12\" className=\"p-2\">\n            <Card className=\"shadow-sm\">\n            <Collapse in={configOpen}>\n              <Card.Body>\n                <Card.Title><h2><Image src=\"Icons/Technical_MDB_Server3x.png\" style={{maxWidth : \"70px\"}} fluid/> Connection settings</h2></Card.Title>\n                  <Card.Text>\n                    Construct the MongoDB connectionstring\n                  </Card.Text>\n                  \n                  <Form>\n                    <Form.Group controlId=\"hostname\">\n                      <Form.Label>Hostname</Form.Label>\n                      <Form.Control ref={clusterHostnameRef}  type=\"text\" placeholder=\"xxxx.mongodb.net\" onBlur={handleInput}/>            \n                    </Form.Group>\n                    <Form.Group controlId=\"database\">\n                      <Form.Label>Database</Form.Label>\n                      <Form.Control ref={databaseRef} type=\"text\" placeholder=\"\" onInput={handleInput} />            \n                    </Form.Group>                    \n                    <Form.Group controlId=\"username\">\n                      <Form.Label>Username</Form.Label>\n                      <Form.Control ref={usernameRef} type=\"text\" placeholder=\"\" onInput={handleInput} />            \n                    </Form.Group>\n                    <Form.Group controlId=\"password\">\n                      <Form.Label>Password</Form.Label>\n                      <Form.Control ref={passwordRef} type=\"password\" placeholder=\"\" onInput={handleInput} />            \n                    </Form.Group>                                                \n                  </Form>\n                \n                  <Button disabled={connectButtonStatus} onClick={handleConnectButton} variant=\"success\" size=\"sm\">Connect</Button> {connectButtonText}       \n              </Card.Body>\n              </Collapse>\n              <Button onClick={() => setConfigOpen(!configOpen)} variant=\"secondary\" size=\"lg\">Show/Hide config</Button> \n            </Card>\n        </Col>\n        <Col lg=\"12\" className=\"p-2\">\n            <Card className=\"shadow-sm\">\n              <Card.Body>\n                <Card.Title className=\"text-center\"><h2><Image src=\"Icons/Technical_MDB_DocumentModel3x.png\" style={{maxWidth : \"70px\"}} fluid/> Insert documents</h2></Card.Title>\n                <Card.Text>\n                  Use buttons below to inser example documents\n                </Card.Text>            \n                <Form>\n                <Form.Group style={{maxWidth: \"55%\"}} controlId=\"formBasicEmail\">\n                    <Form.Label>Example document 1</Form.Label>\n                    <Form.Control ref={exDocument1Ref} as=\"textarea\" rows={4} onInput={handleInput} />           \n                  </Form.Group>\n                  <Button disabled={!connectButtonStatus} onClick={handleInsertButton} style={{marginBottom: \"10px\"}} variant=\"success\" size=\"sm\">Insert</Button>                                          \n                </Form>       \n              </Card.Body>\n            </Card>\n        </Col>           \n        <Col lg=\"12\" className=\"p-2\">\n            <Card className=\"shadow-sm\">\n              <Card.Body>\n                <Card.Title><h2 className=\"text-center\"><Image src='Icons/Technical_MDB_Sharding3x.png' style={{maxWidth : \"70px\"}} roundedCircle/>Shards</h2></Card.Title>\n                <Container fluid=\"lg\" className=\"px-4\" style={{ marginTop: \"50px\" }}>\n                  {\n                    shardInfoLoaded ? (\n                        <Row>\n                          {shardInformation.map((shard) => {\n                            return(\n                            <Col>\n                              <ShardInfo shardData={{name:shard.name, objects: shard.objects}} />\n                            </Col>)\n                          })}\n                      </Row>\n                    ) : ''\n                  }\n\n                </Container>\n                \n                \n              </Card.Body>\n            </Card>\n        </Col>        \n      </Row>\n      </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./animation.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}